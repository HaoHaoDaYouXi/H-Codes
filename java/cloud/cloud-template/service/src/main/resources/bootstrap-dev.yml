spring:
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.0.110:8848
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        # 命名中心 可以不配置使用默认的public 特殊项目特殊配置
        #        namespace:
        # 分组，建议按照服务名命名
        group: ${spring.application.name}
        # dataId 的完整格式如下：${prefix}-${spring.profiles.active}.${file-extension}
        # 使用的 Nacos 配置集的 dataId 的文件拓展名，同时也是 Nacos 配置集的配置格式，默认为 properties
        file-extension: yaml
  datasource:
    druid:
      # 配置 stat-filter
      web-stat-filter:
        enabled: true
        url-pattern: /*
        # 需要过滤druid的访问地址
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/cloud/druid/*'
      # 配置 stat-view-servlet
      stat-view-servlet:
        enabled: true
        # 访问地址，默认：/druid/*    http://ip:端口/项目地址/druid/index.html
        url-pattern: /druid/*
        # ip 白名单，没有配置或为空，默认 127.0.0.1
        allow:
        # ip 黑名单，没有配置或为空，则允许所有访问
        deny:
        # 账号 密码
        loginUsername: admin
        loginPassword: 123456
        # HTML 中的 Reset All 按钮是否能使用
        reset-enable: true
    dynamic:
      druid:
        # 全局druid参数，绝大部分值和默认保持一致。(现已支持的参数如下,不清楚含义不要乱设置)
        # 连接池的配置信息
        # 初始化大小
        initialSize: 5
        # 最大
        maxActive: 20
        # 最小
        minIdle: 5
        # 配置获取连接等待超时的时间
        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictableIdleTimeMillis: 300000
        # 设置空闲时测试连接有效性，true检查，false不检查
        testWhileIdle: true
        # 设置从连接池获取连接时是否检查连接有效性，true检查，false不检查
        testOnBorrow: false
        # 设置从连接池归还连接时是否检查连接有效性，true检查，false不检查
        testOnReturn: false
        # 验证查询
        validationQuery: SELECT 1
        # 检测连接是否有效的超时时间
        validation-query-timeout: 1
        # 打开PSCache，并且指定每个连接上PSCache的大小
        poolPreparedStatements: true
        # 如果大于0，pool-prepared-statements自动开启
        maxPoolPreparedStatementPerConnectionSize: 20
        # 配置默认的监控统计拦截的Filter，不配置则监控页面中的SQL无法统计
        # stat：SQL监控配置，wall：SQL防火墙配置，slf4j：Druid日志配置
        filters: stat,wall,slf4j
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
        connection-properties:
          druid.stat.mergeSql: true
          druid.stat.slowSqlMillis: 5000
        # 异步初始化
        asyncInit: true
      datasource:
        master:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://192.168.0.110:61307/demo?characterEncoding=UTF-8&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai
          username: root
          password: 123456
  data:
    redis:
      host: 192.168.0.110
      port: 6465
      password: 123456
      database: 0
      timeout: 1200

dubbo:
  application:
    name: ${spring.application.name}-dubbo-service
  consumer:
    check: false  # 跳过启动检查，当dubbo服务未启动时，项目也可正常启动
    timeout: 50000
  provider:
    filter: -exception # 跳过dubbo的异常处理类，放回自定义的异常
  registries: # Dubbo 多服务注册中心配置
    nacos:
      default: true # 默认注册中心
      address: nacos://${spring.cloud.nacos.discovery.server-addr}
      register-mode: instance # 启用应用级服务发现，可选值 interface(接口)、instance(应用)、all(全部)
      parameters:
        register-consumer-url: true # 消费者是否注册到注册中心
  scan:
    base-packages: com.haohaodayouxi  # 指定 Dubbo 服务实现类的扫描基准包
  protocols:  # Dubbo服务暴露的协议配置，其中子属性name为协议名称，port为协议端口（-1 表示自增端口，从 20880 开始）
    dubbo:
      name: dubbo
      port: -1

logging:
  level:
    com.haohaodayouxi: debug
